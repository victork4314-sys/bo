name: BioSpeak Release

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: "Optional release name override"
        required: false
        default: ""
  push:
    tags:
      - 'release-*'

env:
  PYTHON_VERSION: '3.11'
  RELEASE_ARCHIVE: BioSpeak_All.zip
  RELEASE_DIR: Release

jobs:
  build_windows:
    name: Build Windows Installer
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt || echo "requirements.txt not found"
          python -m pip install pyinstaller pyqt6 requests biopython scikit-bio pysam pandas numpy matplotlib plotly seaborn scikit-learn tensorflow

      - name: Install NSIS
        shell: powershell
        run: choco install nsis -y

      - name: Build Windows installer
        shell: cmd
        run: build_installer.bat

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/BioSpeakInstaller.exe

  build_macos:
    name: Build macOS Disk Image
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller pyqt6 requests biopython scikit-bio pysam pandas numpy matplotlib plotly seaborn scikit-learn tensorflow

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Build macOS installer
        run: ./build_installer.sh

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-installer
          path: dist/BioSpeakInstaller.dmg

  build_linux:
    name: Build Linux AppImage and Web Bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller requests biopython scikit-bio pysam pandas numpy matplotlib plotly seaborn scikit-learn tensorflow

      - name: Install AppImage tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y desktop-file-utils libfuse2
          wget -q https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Build offline web bundle
        run: |
          ./build_web.sh
          mv dist web_dist

      - name: Build Linux installer
        run: ./build_installer.sh

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-installer
          path: dist/BioSpeakInstaller.AppImage

      - name: Upload web bundle
        uses: actions/upload-artifact@v3
        with:
          name: web-bundle
          path: web_dist

  package_release:
    name: Package Cross-Platform Release
    needs:
      - build_windows
      - build_macos
      - build_linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-installer
          path: artifacts/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-installer
          path: artifacts/macos

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-installer
          path: artifacts/linux

      - name: Download web bundle
        uses: actions/download-artifact@v3
        with:
          name: web-bundle
          path: artifacts/web

      - name: Assemble Release directory
        run: |
          python release/create_release_bundle.py \
            --windows artifacts/windows/BioSpeakInstaller.exe \
            --mac artifacts/macos/BioSpeakInstaller.dmg \
            --linux artifacts/linux/BioSpeakInstaller.AppImage \
            --web artifacts/web \
            --output ${{ env.RELEASE_DIR }}

      - name: Compress release archive
        run: zip -r ${{ env.RELEASE_ARCHIVE }} ${{ env.RELEASE_DIR }}

      - name: Determine release tag
        id: release_vars
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            tag="${GITHUB_REF_NAME}"
          elif [ -n "${{ github.event.inputs.release_name }}" ]; then
            tag="${{ github.event.inputs.release_name }}"
          else
            tag="release-${GITHUB_RUN_NUMBER}"
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "name=BioSpeak Release $tag" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.release_vars.outputs.tag }}
          name: ${{ steps.release_vars.outputs.name }}
          artifacts: ${{ env.RELEASE_ARCHIVE }}
          artifactContentType: application/zip
          allowUpdates: true
          draft: false
          prerelease: false
          body: |
            Automated Bio Speak release bundle generated by GitHub Actions.
            This archive contains the Windows installer, macOS disk image, Linux AppImage, offline web build, and the Open_BioSpeak launcher.

      - name: Print download link
        run: |
          echo "Download the bundle: https://github.com/${{ github.repository }}/releases/download/${{ steps.release_vars.outputs.tag }}/${{ env.RELEASE_ARCHIVE }}"
